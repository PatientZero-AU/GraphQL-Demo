/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.1.6309.35311 (NJsonSchema v8.30.6304.31883) (http://NSwag.org)
// </auto-generated>
//----------------------

import { ToasterService } from 'angular2-toaster';
import { OAuthService } from 'angular-oauth2-oidc';
import { BaseConfiguration } from "./base-configuration.service";

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response, RequestOptionsArgs } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export class BaseClient {

    constructor(baseConfiguration: BaseConfiguration) {
    }

    protected transformOptions(options: RequestOptionsArgs) {

        options.withCredentials = true;
        return Promise.resolve(options);
    }
}

@Injectable()
export class Client extends BaseClient {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(BaseConfiguration) configuration: BaseConfiguration, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    apiAccountLoginPost(username: string): Observable<null> {
        let url_ = this.baseUrl + "/api/Account/Login?";
        if (username !== undefined)
            url_ += "username=" + encodeURIComponent("" + username) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((_response) => {
            return this.processApiAccountLoginPost(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processApiAccountLoginPost(_response);
                } catch (e) {
                    return <Observable<null>><any>Observable.throw(e);
                }
            } else
                return <Observable<null>><any>Observable.throw(_response);
        });
    }

    protected processApiAccountLoginPost(_response: Response): Observable<null | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            return Observable.of(null);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    /**
     * @return Success
     */
    apiAccountLogoutPost(): Observable<null> {
        let url_ = this.baseUrl + "/api/Account/Logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((_response) => {
            return this.processApiAccountLogoutPost(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processApiAccountLogoutPost(_response);
                } catch (e) {
                    return <Observable<null>><any>Observable.throw(e);
                }
            } else
                return <Observable<null>><any>Observable.throw(_response);
        });
    }

    protected processApiAccountLogoutPost(_response: Response): Observable<null | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            return Observable.of(null);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }

    /**
     * @return Success
     */
    apiGraphQlPost(query: GraphQlQueryDto): Observable<any> {
        let url_ = this.baseUrl + "/api/GraphQl";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query ? query.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((_response) => {
            return this.processApiGraphQlPost(_response);
        }).catch((_response: any) => {
            if (_response instanceof Response) {
                try {
                    return this.processApiGraphQlPost(_response);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(_response);
        });
    }

    protected processApiGraphQlPost(_response: Response): Observable<any | null> {
        const _status = _response.status; 

        if (_status === 200) {
            const _responseText = _response.text();
            let result200: any | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return Observable.of(result200);
        } else if (_status !== 200 && _status !== 204) {
            const _responseText = _response.text();
            return throwException("An unexpected server error occurred.", _status, _responseText);
        }
        return Observable.of(null);
    }
}

export class GraphQlQueryDto {
    operationName?: string | undefined;
    query?: string | undefined;
    variables?: any | undefined;

    init(data?: any) {
        if (data) {
            this.operationName = data["operationName"];
            this.query = data["query"];
            if (data["variables"]) {
                this.variables = {};
                for (let key in data["variables"]) {
                    if (data["variables"].hasOwnProperty(key))
                        this.variables[key] = data["variables"][key];
                }
            }
        }
    }

    static fromJS(data: any): GraphQlQueryDto {
        let result = new GraphQlQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = data ? data : {};
        data["operationName"] = this.operationName;
        data["query"] = this.query;
        if (this.variables) {
            data["variables"] = {};
            for (let key in this.variables) {
                if (this.variables.hasOwnProperty(key))
                    data["variables"][key] = this.variables[key];
            }
        }
        return data; 
    }
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}